name: 🔍 Repository Verification & Documentation Validation

on:
  push:
    branches: [ main, develop, 'feature/*', 'copilot/*' ]
    paths:
      - 'development_progress.md'
      - 'NOVASHIELD_2025_COMPLETE_MASTER_BLUEPRINT.md'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'SECURITY.md'
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run verification daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      verification_depth:
        description: 'Verification depth level'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - 'basic'
          - 'comprehensive'
          - 'deep'
          - 'forensic'
      create_discrepancy_issue:
        description: 'Create issue for discrepancies'
        required: false
        default: true
        type: boolean

env:
  VERIFICATION_DEPTH: ${{ github.event.inputs.verification_depth || 'comprehensive' }}
  CREATE_ISSUE: ${{ github.event.inputs.create_discrepancy_issue || 'true' }}

jobs:
  # Documentation Cross-Reference Analysis
  documentation-verification:
    name: 📄 Documentation Cross-Reference Verification
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
    - name: 📥 Checkout code with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup Verification Environment
      run: |
        mkdir -p verification-results
        mkdir -p discrepancy-reports
        mkdir -p validation-reports
        
        # Install analysis tools
        pip install pyyaml jq
        npm install -g markdown-toc

    - name: 📊 Extract Claims from development_progress.md
      run: |
        echo "📊 Extracting implementation claims from development_progress.md..."
        
        # Create comprehensive claims analysis
        cat > verification-results/progress-claims-analysis.md << 'EOF'
        # Development Progress Claims Analysis
        
        **Generated:** $(date)
        **Analysis Depth:** ${{ env.VERIFICATION_DEPTH }}
        
        ## Claimed Completed Tasks
        EOF
        
        # Extract completed tasks with details
        echo "### ✅ Tasks Marked as COMPLETE" >> verification-results/progress-claims-analysis.md
        grep -n "✅.*COMPLETE\|Status.*COMPLETE\|✅.*\(COMPLETED\)" development_progress.md >> verification-results/progress-claims-analysis.md || echo "No completed tasks found" >> verification-results/progress-claims-analysis.md
        
        echo "" >> verification-results/progress-claims-analysis.md
        echo "### 🚧 Tasks Marked as IN PROGRESS" >> verification-results/progress-claims-analysis.md
        grep -n "🚧.*IN PROGRESS\|Status.*IN PROGRESS" development_progress.md >> verification-results/progress-claims-analysis.md || echo "No in-progress tasks found" >> verification-results/progress-claims-analysis.md
        
        echo "" >> verification-results/progress-claims-analysis.md
        echo "### 📊 Statistics" >> verification-results/progress-claims-analysis.md
        
        completed_count=$(grep -c "✅.*COMPLETE\|Status.*COMPLETE\|✅.*\(COMPLETED\)" development_progress.md || echo "0")
        in_progress_count=$(grep -c "🚧.*IN PROGRESS\|Status.*IN PROGRESS" development_progress.md || echo "0")
        
        echo "- **Completed Tasks:** $completed_count" >> verification-results/progress-claims-analysis.md
        echo "- **In Progress Tasks:** $in_progress_count" >> verification-results/progress-claims-analysis.md
        
        # Extract specific implementation claims
        echo "" >> verification-results/progress-claims-analysis.md
        echo "### 🔍 Specific Implementation Claims" >> verification-results/progress-claims-analysis.md
        
        # Docker claims
        if grep -q -i "docker" development_progress.md; then
          echo "- **Docker Implementation Claimed:** ✅" >> verification-results/progress-claims-analysis.md
        else
          echo "- **Docker Implementation Claimed:** ❌" >> verification-results/progress-claims-analysis.md
        fi
        
        # TypeScript claims
        if grep -q -i "typescript" development_progress.md; then
          echo "- **TypeScript Implementation Claimed:** ✅" >> verification-results/progress-claims-analysis.md
        else
          echo "- **TypeScript Implementation Claimed:** ❌" >> verification-results/progress-claims-analysis.md
        fi
        
        # Security features claims
        if grep -q -i "security.*implement\|jwt.*implement\|auth.*implement" development_progress.md; then
          echo "- **Security Features Claimed:** ✅" >> verification-results/progress-claims-analysis.md
        else
          echo "- **Security Features Claimed:** ❌" >> verification-results/progress-claims-analysis.md
        fi
        
        # CI/CD pipeline claims
        if grep -q -i "ci.*cd\|pipeline\|github.*action" development_progress.md; then
          echo "- **CI/CD Pipeline Claimed:** ✅" >> verification-results/progress-claims-analysis.md
        else
          echo "- **CI/CD Pipeline Claimed:** ❌" >> verification-results/progress-claims-analysis.md
        fi

    - name: 🔍 Verify Actual Implementation vs Claims
      run: |
        echo "🔍 Verifying actual implementation against documented claims..."
        
        cat > discrepancy-reports/implementation-verification.md << 'EOF'
        # Implementation vs Claims Verification Report
        
        **Generated:** $(date)
        **Verification Depth:** ${{ env.VERIFICATION_DEPTH }}
        
        ## Verification Results
        EOF
        
        discrepancies_found=0
        
        echo "### 📁 Directory Structure Verification" >> discrepancy-reports/implementation-verification.md
        
        # Check claimed directory structure
        required_dirs=(
          "nova-dashboard"
          "nova-dashboard/frontend"
          "nova-dashboard/backend"
          "nova-dashboard/security-engine"
          "nova-dashboard/terminal-service"
          "nova-dashboard/monitoring-service"
        )
        
        for dir in "${required_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "✅ **$dir:** Exists as expected" >> discrepancy-reports/implementation-verification.md
          else
            echo "❌ **$dir:** Missing despite documentation claims" >> discrepancy-reports/implementation-verification.md
            discrepancies_found=$((discrepancies_found + 1))
          fi
        done
        
        echo "" >> discrepancy-reports/implementation-verification.md
        echo "### 📄 Configuration Files Verification" >> discrepancy-reports/implementation-verification.md
        
        # Check for claimed configuration files
        config_files=(
          "nova-dashboard/frontend/package.json"
          "nova-dashboard/backend/package.json"
          "nova-dashboard/security-engine/requirements.txt"
          "nova-dashboard/terminal-service/Cargo.toml"
          "nova-dashboard/monitoring-service/go.mod"
        )
        
        for file in "${config_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ **$file:** Exists" >> discrepancy-reports/implementation-verification.md
          else
            echo "❌ **$file:** Missing" >> discrepancy-reports/implementation-verification.md
            discrepancies_found=$((discrepancies_found + 1))
          fi
        done
        
        echo "" >> discrepancy-reports/implementation-verification.md
        echo "### 🐳 Docker Implementation Verification" >> discrepancy-reports/implementation-verification.md
        
        # Check Docker implementation
        docker_files=(
          "nova-dashboard/frontend/Dockerfile"
          "nova-dashboard/backend/Dockerfile"
          "nova-dashboard/security-engine/Dockerfile"
          "nova-dashboard/terminal-service/Dockerfile"
          "nova-dashboard/monitoring-service/Dockerfile"
          "nova-dashboard/docker/docker-compose.yml"
        )
        
        docker_implemented=0
        for file in "${docker_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ **$file:** Implemented" >> discrepancy-reports/implementation-verification.md
            docker_implemented=$((docker_implemented + 1))
          else
            echo "❌ **$file:** Missing" >> discrepancy-reports/implementation-verification.md
            discrepancies_found=$((discrepancies_found + 1))
          fi
        done
        
        if [ $docker_implemented -gt 0 ] && grep -q -i "docker.*complete\|docker.*implement" development_progress.md; then
          echo "✅ **Docker Claims Verification:** Partially accurate ($docker_implemented/6 files)" >> discrepancy-reports/implementation-verification.md
        elif [ $docker_implemented -eq 0 ] && grep -q -i "docker.*complete" development_progress.md; then
          echo "❌ **Docker Claims Verification:** Claims are inaccurate - no Docker files found" >> discrepancy-reports/implementation-verification.md
          discrepancies_found=$((discrepancies_found + 1))
        fi
        
        echo "" >> discrepancy-reports/implementation-verification.md
        echo "### 📊 Summary" >> discrepancy-reports/implementation-verification.md
        echo "- **Total Discrepancies Found:** $discrepancies_found" >> discrepancy-reports/implementation-verification.md
        
        # Store discrepancy count for later use
        echo $discrepancies_found > discrepancy-count.txt

    - name: 🚨 Create Discrepancy Issue (if enabled and discrepancies found)
      if: env.CREATE_ISSUE == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const discrepancyCount = parseInt(fs.readFileSync('discrepancy-count.txt', 'utf8').trim());
          
          if (discrepancyCount > 0) {
            const reportContent = fs.readFileSync('discrepancy-reports/implementation-verification.md', 'utf8');
            
            let severity = 'medium';
            let labels = ['documentation', 'verification', 'automated'];
            
            if (discrepancyCount > 10) {
              severity = 'critical';
              labels.push('priority-critical');
            } else if (discrepancyCount > 3) {
              severity = 'high';
              labels.push('priority-high');
            } else {
              labels.push('priority-medium');
            }
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Documentation Discrepancies Detected - ${discrepancyCount} Issues Found`,
              body: `# 🔍 Repository Verification Issues Detected
              
              **Automated verification has found ${discrepancyCount} discrepancies between documentation and actual implementation.**
              
              **Verification Run:** #${{ github.run_number }}
              **Branch:** ${{ github.ref_name }}
              **Severity:** ${severity.toUpperCase()}
              **Verification Depth:** ${{ env.VERIFICATION_DEPTH }}
              
              ## 📊 Summary
              
              The repository verification workflow has identified inconsistencies between what is documented in \`development_progress.md\` and the actual implementation in the repository.
              
              ## 📋 Full Verification Report
              
              ${reportContent}
              
              ## 🎯 Required Actions
              
              1. **Review all identified discrepancies**
              2. **Update documentation to reflect actual implementation status**
              3. **Complete any missing implementations that are claimed as done**
              4. **Verify accuracy of all completion claims**
              
              ## 🔄 Next Steps
              
              - Assign this issue to the appropriate team member
              - Address each discrepancy identified in the report
              - Re-run verification workflow to confirm fixes
              - Update project documentation standards to prevent future discrepancies
              
              *This issue was automatically created by the Repository Verification workflow.*`,
              labels: labels
            });
          }

    - name: 📊 Upload Verification Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: repository-verification-results
        path: |
          verification-results/
          discrepancy-reports/
          validation-reports/
        retention-days: 90

  # Final Verification Summary
  verification-summary:
    name: 📊 Verification Summary & Reporting
    runs-on: ubuntu-latest
    needs: [documentation-verification]
    if: always()
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
    - name: 📢 Final Verification Notification
      run: |
        echo "🔍 Repository Verification Workflow Completed"
        echo "=============================================="
        echo "Documentation Verification: ${{ needs.documentation-verification.result }}"
        echo "Verification Depth: ${{ env.VERIFICATION_DEPTH }}"
        echo "Create Issue Enabled: ${{ env.CREATE_ISSUE }}"
        echo ""
        echo "📊 Check artifacts for detailed verification reports!"
        echo "🔍 NovaShield 2025 - Repository Verification Complete"